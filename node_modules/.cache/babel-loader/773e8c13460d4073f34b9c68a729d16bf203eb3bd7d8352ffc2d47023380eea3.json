{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport useFetch from \"../checkin/config/useFetch\";\nimport Loader from \"../loader/Loader\";\nimport Alert from \"../alert/Alert\";\nimport axiosApi from \"../checkin/config/axios.client\";\nimport { SectorLevel } from \"../constants/sectorlevels.enum\";\nimport Select from \"react-select\";\nconst DefaultSector = props => {\n  alert(JSON.stringify(props));\n\n  /* const result = useFetch({url: \"api/public/sectors\"});\n   const [sectors, setSectors] = useState(formData);\n   const [isLoading, setIsLoading] = useState(false);\n   const [isError, setIsError] = useState(false);\n   const [message, setMessage] = useState(\"\");\n   const [options, setOptions] = useState([]);\n    const buildOptions = (rawData) => {\n       const options = [];\n       rawData.map((sector) => {\n           options.push({\n               value: (sector.id + '-' + SectorLevel.SECTOR_CATEGORY),\n               label: sector.name,\n               isDisabled: (sector.subSectors.length > 0)\n           });\n           sector.subSectors.map((subSector) => {\n               options.push({\n                   value: (subSector.id + '-' + SectorLevel.SUB_SECTOR),\n                   label: '\\u00A0\\u00A0\\u00A0\\u00A0' + subSector.name,\n                   isDisabled: (subSector.minorSectors.length > 0)\n               });\n               subSector.minorSectors.map((minorSector) => {\n                   options.push({\n                       value: (minorSector.id + '-' + SectorLevel.MINOR_SECTOR),\n                       label: '\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0' + minorSector.name,\n                       isDisabled: (minorSector.sectors.length > 0)\n                   });\n                   minorSector.sectors.map((value) => {\n                       options.push({\n                           value: (value.id + '-' + SectorLevel.SECTOR),\n                           label: '\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0' + value.name\n                       });\n                    })\n               })\n           })\n       });\n       return options;\n   }\n    useEffect(() => {\n       setOptions(buildOptions(result.data))\n   }, [])\n    const getAuthUser = () => {\n       return JSON.parse(sessionStorage.getItem('user'));\n   }\n    const handleChange = (e) => {\n       const name = e.target.name;\n       const value = (name === \"agreeTerms\" ? (!sectors.agreeTerms) : e.target.value);\n       setSectors({...sectors, [name]: value});\n   }\n   const handleSubmit = async (e) => {\n       e.preventDefault();\n       if ((sectors.name.length === 0 && sectors.sectors.length === 0 && !sectors.agreeTerms)) return;\n        const user = getAuthUser();\n        return (validateInput() ? (\n               !isEdit ?\n                   await createSector({\n                       userId: user.id,\n                       name: sectors.name,\n                       sectors: sectors.sectors,\n                       agreeTerms: sectors.agreeTerms\n                   }) :\n                   await updateSector({\n                       name: sectors.name,\n                       sectors: sectors.sectors,\n                       agreeTerms: sectors.agreeTerms\n                   })) : (setMessage(\"All form fields are required\"), setIsError(true))\n       );\n   }\n    const setSelectedOptions = (transform) => {\n       const sectorOptions = transform.map((option) => {\n           const [id, depthType] = option.value.split(\"-\");\n           return {\n               id: id,\n               depthType: depthType\n           }\n       });\n       setSectors({...sectors, sectors: sectorOptions});\n   }\n    const createSector = async (body) => {\n       setIsLoading(true);\n       try {\n           await axiosApi({'method': 'POST', 'url': \"api/protected/users/sectors\", data: body});\n           setIsLoading(false);\n           window.location.reload();\n       } catch (error) {\n           setIsError(true);\n           setMessage(\"An unexpected error occurs while adding your selected sector information\")\n           setIsLoading(false);\n           setSectors(formData);\n       }\n   }\n    const updateSector = async (body) => {\n       setIsLoading(true);\n       try {\n           await axiosApi({'method': 'PUT', 'url': `api/protected/users/${body.userId}/sectors`, data: body});\n           setIsLoading(false);\n           window.location.href = \"/\";\n       } catch (error) {\n           setIsError(true);\n           setMessage(\"An unexpected error occurs while updating your sector information\")\n           setIsLoading(false);\n           setSectors(formData);\n       }\n   }\n    const validateInput = () => {\n       return (sectors.name.length > 0 && sectors.sectors.length > 0 && sectors.agreeTerms);\n   }\n    if (result.loading || isLoading) {\n       return <Loader className=\"page-loader\"/>\n   }\n    return (\n       <div>\n           <h4 className=\"card-title\">Sector Registration</h4>\n           <Alert className=\"alert alert-danger\"\n                  message={message}\n                  show={isError} reset={setIsError}/><br/>\n           <form onSubmit={handleSubmit}>\n               <div className=\"form-group form-group--left fm-input-width\">\n                   <label>Name</label>\n                   <input type=\"text\" className=\"form-control fm-input-width\" name=\"name\"\n                          value={sectors.name}\n                          onChange={handleChange}/>\n                   <i className=\"form-group__bar fm-input-width\"/>\n               </div>\n               {result.data.length > 0 ? <div>\n                       <br/><br/>\n                       <div className=\"form-group form-group--left fm-input-width\">\n                           <label>Sectors</label>\n                           <Select\n                               defaultValue={[]}\n                               onChange={setSelectedOptions}\n                               options={options}\n                               isMulti\n                               isSearchable\n                               className=\"fm-input-width\"\n                           />\n                       </div>\n                   </div>\n                   : ''\n               }\n               <br/><br/>\n               <div className=\"mb-2\">\n                   <input type=\"checkbox\" name=\"agreeTerms\"\n                          onChange={handleChange} value={sectors.agreeTerms}\n                          checked={sectors.agreeTerms}/> Agree to terms\n               </div>\n               <br/><br/>\n               <button type=\"submit\" className=\"btn login__block__btn\">{isEdit ? \"Edit\" : \"Save\"}</button>\n           </form>\n       </div>\n   );*/\n};\n_c = DefaultSector;\nexport default DefaultSector;\nvar _c;\n$RefreshReg$(_c, \"DefaultSector\");","map":{"version":3,"names":["React","useEffect","useState","useFetch","Loader","Alert","axiosApi","SectorLevel","Select","DefaultSector","props","alert","JSON","stringify","_c","$RefreshReg$"],"sources":["/home/ewangclarks/Documents/Projects/Technical Interview/hk-sar-react/src/components/sector/DefaultSector.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport useFetch from \"../checkin/config/useFetch\";\nimport Loader from \"../loader/Loader\";\nimport Alert from \"../alert/Alert\";\nimport axiosApi from \"../checkin/config/axios.client\";\nimport {SectorLevel} from \"../constants/sectorlevels.enum\";\nimport Select from \"react-select\";\n\nconst DefaultSector = (props) => {\n    alert(JSON.stringify(props));\n\n   /* const result = useFetch({url: \"api/public/sectors\"});\n    const [sectors, setSectors] = useState(formData);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    const [message, setMessage] = useState(\"\");\n    const [options, setOptions] = useState([]);\n\n    const buildOptions = (rawData) => {\n        const options = [];\n        rawData.map((sector) => {\n            options.push({\n                value: (sector.id + '-' + SectorLevel.SECTOR_CATEGORY),\n                label: sector.name,\n                isDisabled: (sector.subSectors.length > 0)\n            });\n            sector.subSectors.map((subSector) => {\n                options.push({\n                    value: (subSector.id + '-' + SectorLevel.SUB_SECTOR),\n                    label: '\\u00A0\\u00A0\\u00A0\\u00A0' + subSector.name,\n                    isDisabled: (subSector.minorSectors.length > 0)\n                });\n                subSector.minorSectors.map((minorSector) => {\n                    options.push({\n                        value: (minorSector.id + '-' + SectorLevel.MINOR_SECTOR),\n                        label: '\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0' + minorSector.name,\n                        isDisabled: (minorSector.sectors.length > 0)\n                    });\n                    minorSector.sectors.map((value) => {\n                        options.push({\n                            value: (value.id + '-' + SectorLevel.SECTOR),\n                            label: '\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0\\u00A0' + value.name\n                        });\n\n                    })\n                })\n            })\n        });\n        return options;\n    }\n\n    useEffect(() => {\n        setOptions(buildOptions(result.data))\n    }, [])\n\n    const getAuthUser = () => {\n        return JSON.parse(sessionStorage.getItem('user'));\n    }\n\n    const handleChange = (e) => {\n        const name = e.target.name;\n        const value = (name === \"agreeTerms\" ? (!sectors.agreeTerms) : e.target.value);\n        setSectors({...sectors, [name]: value});\n    }\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if ((sectors.name.length === 0 && sectors.sectors.length === 0 && !sectors.agreeTerms)) return;\n\n        const user = getAuthUser();\n\n        return (validateInput() ? (\n                !isEdit ?\n                    await createSector({\n                        userId: user.id,\n                        name: sectors.name,\n                        sectors: sectors.sectors,\n                        agreeTerms: sectors.agreeTerms\n                    }) :\n                    await updateSector({\n                        name: sectors.name,\n                        sectors: sectors.sectors,\n                        agreeTerms: sectors.agreeTerms\n                    })) : (setMessage(\"All form fields are required\"), setIsError(true))\n        );\n    }\n\n    const setSelectedOptions = (transform) => {\n        const sectorOptions = transform.map((option) => {\n            const [id, depthType] = option.value.split(\"-\");\n            return {\n                id: id,\n                depthType: depthType\n            }\n        });\n        setSectors({...sectors, sectors: sectorOptions});\n    }\n\n    const createSector = async (body) => {\n        setIsLoading(true);\n        try {\n            await axiosApi({'method': 'POST', 'url': \"api/protected/users/sectors\", data: body});\n            setIsLoading(false);\n            window.location.reload();\n        } catch (error) {\n            setIsError(true);\n            setMessage(\"An unexpected error occurs while adding your selected sector information\")\n            setIsLoading(false);\n            setSectors(formData);\n        }\n    }\n\n    const updateSector = async (body) => {\n        setIsLoading(true);\n        try {\n            await axiosApi({'method': 'PUT', 'url': `api/protected/users/${body.userId}/sectors`, data: body});\n            setIsLoading(false);\n            window.location.href = \"/\";\n        } catch (error) {\n            setIsError(true);\n            setMessage(\"An unexpected error occurs while updating your sector information\")\n            setIsLoading(false);\n            setSectors(formData);\n        }\n    }\n\n    const validateInput = () => {\n        return (sectors.name.length > 0 && sectors.sectors.length > 0 && sectors.agreeTerms);\n    }\n\n    if (result.loading || isLoading) {\n        return <Loader className=\"page-loader\"/>\n    }\n\n    return (\n        <div>\n            <h4 className=\"card-title\">Sector Registration</h4>\n            <Alert className=\"alert alert-danger\"\n                   message={message}\n                   show={isError} reset={setIsError}/><br/>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-group form-group--left fm-input-width\">\n                    <label>Name</label>\n                    <input type=\"text\" className=\"form-control fm-input-width\" name=\"name\"\n                           value={sectors.name}\n                           onChange={handleChange}/>\n                    <i className=\"form-group__bar fm-input-width\"/>\n                </div>\n                {result.data.length > 0 ? <div>\n                        <br/><br/>\n                        <div className=\"form-group form-group--left fm-input-width\">\n                            <label>Sectors</label>\n                            <Select\n                                defaultValue={[]}\n                                onChange={setSelectedOptions}\n                                options={options}\n                                isMulti\n                                isSearchable\n                                className=\"fm-input-width\"\n                            />\n                        </div>\n                    </div>\n                    : ''\n                }\n                <br/><br/>\n                <div className=\"mb-2\">\n                    <input type=\"checkbox\" name=\"agreeTerms\"\n                           onChange={handleChange} value={sectors.agreeTerms}\n                           checked={sectors.agreeTerms}/> Agree to terms\n                </div>\n                <br/><br/>\n                <button type=\"submit\" className=\"btn login__block__btn\">{isEdit ? \"Edit\" : \"Save\"}</button>\n            </form>\n        </div>\n    );*/\n};\n\nexport default DefaultSector;\n"],"mappings":"AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,QAAO,OAAO;AAChD,OAAOC,QAAQ,MAAM,4BAA4B;AACjD,OAAOC,MAAM,MAAM,kBAAkB;AACrC,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,SAAQC,WAAW,QAAO,gCAAgC;AAC1D,OAAOC,MAAM,MAAM,cAAc;AAEjC,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAC7BC,KAAK,CAACC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC,CAAC;;EAE7B;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA,CAAC;AAACI,EAAA,GAtKIL,aAAa;AAwKnB,eAAeA,aAAa;AAAC,IAAAK,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}